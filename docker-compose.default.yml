# # docker-compose.default.yml
version: '3.5'

services:

  wp:
    image: pmc-dev-wp
    build:
      context: ./docker/wpdev
    depends_on:
      - memcached
      - mysql
      - redis
      - traefik
    restart: "unless-stopped"
    labels:
      - traefik.enable=true
      - traefik.http.routers.wp-https.entrypoints=websecure
      - traefik.http.routers.wp-https.priority=1
      - traefik.http.routers.wp-https.rule=HostRegexp(`{domain:.*}`)
      - traefik.http.routers.wp-https.tls.certresolver=file
    networks:
      default:
        aliases:
          - wp
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - docker-compose.env
    environment:
      XDEBUG_REMOTE_HOST: "${XDEBUG_REMOTE_HOST-}"
      SSH_AUTH_SOCK: /ssh/ssh-agent.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - root:/root
      - tmp:/tmp
      - ssh:/ssh
      - ./:/pmc-dev
      - ./wp-root:/var/www/html

  redis:
    image: redis
    restart: "unless-stopped"
    labels:
      - "traefik.enable=false"
    networks:
      default:
        aliases:
          - redis
          - revtech-net-redis
    ports:
      - "${PMC_DEV_REDIS_IP-0.0.0.0}:6379:6379"
    volumes:
      - redis:/data

  memcached:
    image: memcached
    restart: "unless-stopped"
    labels:
      - "traefik.enable=false"
    networks:
      default:
        aliases:
          - memcached

  mysql:
    # Note: we're using the official mysql image for mysql workbench compatible since it doesn't work with mariadb
    # use docker-composer.override.yml to override prefer to use mariadb image
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: "unless-stopped"
    labels:
      - "traefik.enable=false"
    networks:
      default:
        ipv4_address: 172.30.30.6
        aliases:
          - mysql
          - revtech-net-mariadb
    ports:
      - "${PMC_DEV_MYSQL_IP-0.0.0.0}:3306:3306"
    env_file:
      - docker-compose.env
    volumes:
      - ./:/pmc-dev
      - mysql:/var/lib/mysql

  rabbitmq:
    environment:
      RABBITMQ_DEFAULT_USER: ${PMC_DEV_RABBITMQ_USER-user}
      RABBITMQ_DEFAULT_PASS: ${PMC_DEV_RABBITMQ_PASSWORD-password}
    image: rabbitmq:management-alpine
    restart: "unless-stopped"
    ports:
      - "${PMC_DEV_RABBITMQ_IP-0.0.0.0}:15672:15672"
      - "${PMC_DEV_RABBITMQ_IP-0.0.0.0}:5672:5672"
    logging:
      driver: none
    labels:
      - "traefik.enable=false"
    networks:
      default:
        aliases:
          - rabbitmq
          - revtech-net-rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  consul:
    command: "consul agent -server -bootstrap -node boomerang.consul -log-level=err -ui -client 0.0.0.0 -data-dir=/consul/data"
    image: consul
    restart: "unless-stopped"
    networks:
      default:
        aliases:
          - consul
          - revtech-net-consul
    ports:
      - "${PMC_DEV_CONSUL_IP-0.0.0.0}:8500:8500"
    volumes:
      - consul:/consul/data

  ssh-agent:
    image: pmc-dev-ssh-agent
    build:
      context: ./docker/ssh-agent
    restart: "unless-stopped"
    labels:
      - "traefik.enable=false"
    networks:
      default:
        aliases:
          - ssh-agent
    working_dir: /pmc-dev
    env_file:
      - docker-compose.env
    environment:
      - PMC_CI_ENCODED_KEY="${SSH_ENCODED_KEY-}"
      - SSH_AUTH_SOCK=/ssh/ssh-agent.sock
    secrets:
      - ssh_key
    volumes:
      - root:/root
      - ssh:/ssh
      - tmp:/tmp
      - ./:/pmc-dev
      - ~/.ssh:/root/.ssh

  traefik:
    image: traefik:2.9
    restart: "unless-stopped"
    networks:
      default:
        # We want to reserve this IP for future use
        # ${PMC_DEV_TRAEFIK_IP} can be empty or string format "x.x.x.x"
        ipv4_address: "${PMC_DEV_TRAEFIK_IP-172.30.80.80}"
        aliases:
          - traefik.pmcdev.local
          - traefik
    ports:
      # ${PMC_DEV_BIND_IP} can be empty or string format "x.x.x.x"
      - "${PMC_DEV_BIND_IP-0.0.0.0}:443:443"
      - "${PMC_DEV_BIND_IP-0.0.0.0}:80:80"
    env_file:
      - docker-compose.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/traefik:/etc/traefik

networks:
  # Using a giant single subnet for everything
  # docker for window for some reason doesn't like two network interface on a container
  # windows can't route traffic to the second interface and we have no control on the primary interface assigned
  default:
    name: traefik
    driver: bridge
    ipam:
      driver: default
      config:
      # We need this subnet to be fixed and reserved for all web traffics.  This can be override by docker-compose.override.yml
      # We shouldn't need more than class c address on development environment
      - subnet: 172.30.0.0/16

volumes:
  configstore:
    name: configstore
  consul:
    name: consul
  mysql:
    name: mysql
  rabbitmq:
    name: rabbitmq
  redis:
    name: redis
  root:
    name: root
  ssh:
    name: ssh
  tmp:
    name: tmp

secrets:
  ssh_key:
    file: ~/.ssh/id_rsa
